package com.antiaction.classfile;

import java.util.Map;
import java.util.TreeMap;

public class Constants {

	public static final int CLASSFILE_VERSION_45_3 = 1;
	public static final int CLASSFILE_VERSION_49_0 = 2;
	public static final int CLASSFILE_VERSION_50_0 = 3;
	public static final int CLASSFILE_VERSION_51_0 = 4;
	public static final int CLASSFILE_VERSION_52_0 = 5;

	public static final int JVM_VERSION_1_0_2 = 1;
	public static final int JVM_VERSION_1_1 = 2;
	public static final int JVM_VERSION_5_0 = 3;
	public static final int JVM_VERSION_6 = 4;
	public static final int JVM_VERSION_7 = 5;
	public static final int JVM_VERSION_8 = 6;

	public static final int MAGIC = 0xCAFEBABE;

	/** // Declared public; may be accessed from outside its package. */
	public static final int ACC_PUBLIC = 0x0001;
	/** Declared private; accessible only within the defining class / usable only within the defining class. */
	public static final int ACC_PRIVATE = 0x0002;
	/** Declared protected; may be accessed within subclasses. */
	public static final int ACC_PROTECTED = 0x0004;
	/** Declared static. */
	public static final int ACC_STATIC = 0x0008;
	/** Declared final; must not be overridden / no subclasses allowed / no further assignment after initialization. */
	public static final int ACC_FINAL = 0x0010;
	/** Treat superclass methods specially when invoked by the invokespecial instruction. */
	public static final int ACC_SUPER = 0x0020;
	/** Declared synchronized; invocation is wrapped in a monitor lock. */
	public static final int ACC_SYNCHRONIZED = 0x0020;
	/** A bridge method, generated by the compiler. */
	public static final int ACC_BRIDGE = 0x0040;
	/** Declared volatile; cannot be cached. */
	public static final int ACC_VOLATILE = 0x0040;
	/** Declared transient; not written or read by a persistent object manager. */
	public static final int ACC_TRANSIENT = 0x0080;
	/** Declared with variable number of arguments. */
	public static final int ACC_VARARGS = 0x0080;
	/** Declared native; implemented in a language other than Java. */
	public static final int ACC_NATIVE = 0x0100;
	/** Is an interface, not a class. */
	public static final int ACC_INTERFACE = 0x0200;
	/** Declared abstract; must not be instantiated / no implementation is provided. */
	public static final int ACC_ABSTRACT = 0x0400;
	/** Declared strictfp; floating-point mode is FP-strict. */
	public static final int ACC_STRICT = 0x0800;
	/** Declared synthetic; Not present in the source code. */
	public static final int ACC_SYNTHETIC = 0x1000;
	/** Declared as an annotation type. */
	public static final int ACC_ANNOTATION = 0x2000;
	/** Declared as an enum type / as an element of an enum. */
	public static final int ACC_ENUM = 0x4000;

	public static final int ACCESS_FLAGS_MASK = ACC_PUBLIC | ACC_FINAL | ACC_SUPER | ACC_INTERFACE | ACC_ABSTRACT | ACC_SYNTHETIC | ACC_ANNOTATION | ACC_ENUM;

	public static final int FIELD_ACCESS_FLAGS_MASK = ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED | ACC_STATIC | ACC_FINAL | ACC_VOLATILE | ACC_TRANSIENT | ACC_SYNTHETIC | ACC_ENUM;

	public static final int METHOD_ACCESS_FLAGS_MASK = ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED | ACC_STATIC | ACC_FINAL | ACC_SYNCHRONIZED | ACC_BRIDGE | ACC_VARARGS | ACC_NATIVE | ACC_ABSTRACT | ACC_STRICT | ACC_SYNTHETIC;

	public static final int ATTR_LOCATION_CLASSFILE = 1;
	public static final int ATTR_LOCATION_FIELD_INFO = 2;
	public static final int ATTR_LOCATION_METHOD_INFO = 4;
	public static final int ATTR_LOCATION_CODE = 8;

	public static final Map<String, Integer> attrNameIdMap = new TreeMap<String, Integer>();

	public static final int ATTR_CONSTANTVALUE_ID = 1;
	public static final int ATTR_CODE_ID = 2;
	public static final int ATTR_EXCEPTIONS_ID = 3;
	public static final int ATTR_SOURCEFILE_ID = 4;
	public static final int ATTR_LINENUMBERTABLE_ID = 5;
	public static final int ATTR_LOCALVARIABLETABLE_ID = 6;
	public static final int ATTR_INNERCLASSES_ID = 7;
	public static final int ATTR_SYNTHETIC_ID = 8;
	public static final int ATTR_DEPRECATED_ID = 9;
	public static final int ATTR_ENCLOSINGMETHOD_ID = 10;
	public static final int ATTR_SIGNATURE_ID = 11;
	public static final int ATTR_SOURCEDEBUGEXTENSION_ID = 12;
	public static final int ATTR_LOCALVARIABLETYPETABLE_ID = 13;
	public static final int ATTR_RUNTIMEVISIBLEANNOTATIONS_ID = 14;
	public static final int ATTR_RUNTIMEINVISIBLEANNOTATIONS_ID = 15;
	public static final int ATTR_RUNTIMEVISIBLEPARAMETERANNOTATIONS_ID = 16;
	public static final int ATTR_RUNTIMEINVISIBLEPARAMETERANNOTATIONS_ID = 17;
	public static final int ATTR_ANNOTATIONDEFAULT_ID = 18;
	public static final int ATTR_STACKMAPTABLE_ID = 19;
	public static final int ATTR_BOOTSTRAPMETHODS_ID = 20;
	public static final int ATTR_RUNTIMEVISIBLETYPEANNOTATIONS_ID = 21;
	public static final int ATTR_RUNTIMEINVISIBLETYPEANNOTATIONS_ID = 22;
	public static final int ATTR_METHODPARAMETERS_ID = 23;

	static {
		attrNameIdMap.put( "ConstantValue", ATTR_CONSTANTVALUE_ID );
		attrNameIdMap.put( "Code", ATTR_CODE_ID );
		attrNameIdMap.put( "Exceptions", ATTR_EXCEPTIONS_ID );
		attrNameIdMap.put( "SourceFile", ATTR_SOURCEFILE_ID );
		attrNameIdMap.put( "LineNumberTable", ATTR_LINENUMBERTABLE_ID );
		attrNameIdMap.put( "LocalVariableTable", ATTR_LOCALVARIABLETABLE_ID );
		attrNameIdMap.put( "InnerClasses", ATTR_INNERCLASSES_ID );
		attrNameIdMap.put( "Synthetic", ATTR_SYNTHETIC_ID );
		attrNameIdMap.put( "Deprecated", ATTR_DEPRECATED_ID );
		attrNameIdMap.put( "EnclosingMethod", ATTR_ENCLOSINGMETHOD_ID );
		attrNameIdMap.put( "Signature", ATTR_SIGNATURE_ID );
		attrNameIdMap.put( "SourceDebugExtension", ATTR_SOURCEDEBUGEXTENSION_ID );
		attrNameIdMap.put( "LocalVariableTypeTable", ATTR_LOCALVARIABLETYPETABLE_ID );
		attrNameIdMap.put( "RuntimeVisibleAnnotations", ATTR_RUNTIMEVISIBLEANNOTATIONS_ID );
		attrNameIdMap.put( "RuntimeInvisibleAnnotations", ATTR_RUNTIMEINVISIBLEANNOTATIONS_ID );
		attrNameIdMap.put( "RuntimeVisibleParameterAnnotations", ATTR_RUNTIMEVISIBLEPARAMETERANNOTATIONS_ID );
		attrNameIdMap.put( "RuntimeInvisibleParameterAnnotations", ATTR_RUNTIMEINVISIBLEPARAMETERANNOTATIONS_ID );
		attrNameIdMap.put( "AnnotationDefault", ATTR_ANNOTATIONDEFAULT_ID );
		attrNameIdMap.put( "StackMapTable", ATTR_STACKMAPTABLE_ID );
		attrNameIdMap.put( "BootstrapMethods", ATTR_BOOTSTRAPMETHODS_ID );
		attrNameIdMap.put( "RuntimeVisibleTypeAnnotations", ATTR_RUNTIMEVISIBLETYPEANNOTATIONS_ID );
		attrNameIdMap.put( "RuntimeInvisibleTypeAnnotations", ATTR_RUNTIMEINVISIBLETYPEANNOTATIONS_ID );
		attrNameIdMap.put( "MethodParameters", ATTR_METHODPARAMETERS_ID );
	}

}
